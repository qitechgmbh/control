FROM rust:1.86 AS base

RUN cargo install sccache --version ^0.7
RUN cargo install cargo-chef --version ^0.1
# Set environment variables for sccache
ENV RUSTC_WRAPPER=sccache SCCACHE_DIR=/sccache

# --- Dependency Planner Stage ---
FROM base AS planner
WORKDIR /app

# Copy manifest and source files required for dependency resolution
COPY Cargo.toml Cargo.lock ./
COPY server ./server
COPY control-core ./control-core
COPY ethercat-hal ./ethercat-hal
COPY ethercat-hal-derive ./ethercat-hal-derive
COPY ethercat-eeprom-dump ./ethercat-eeprom-dump

# Run cargo-chef to analyze dependencies and generate a recipe for efficient caching
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    cargo chef prepare --recipe-path recipe.json

# --- Builder Stage ---
FROM base as builder
WORKDIR /app
# Install system dependencies required for building Rust crates (e.g., OpenSSL, udev)
RUN apt-get update && \
    apt-get install -y libssl-dev ca-certificates libudev-dev pkg-config && \
    rm -rf /var/lib/apt/lists/*

# Copy the dependency recipe from the planner stage
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies only, leveraging Docker cache for faster builds
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    cargo chef cook --release --recipe-path recipe.json

# Copy the full source code for the final build
COPY Cargo.toml Cargo.lock ./
COPY server ./server
COPY control-core ./control-core
COPY ethercat-hal ./ethercat-hal
COPY ethercat-hal-derive ./ethercat-hal-derive
COPY ethercat-eeprom-dump ./ethercat-eeprom-dump

# Build the actual application in release mode, using sccache for speed
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=$SCCACHE_DIR,sharing=locked \
    cargo build
